!function(n){function o(t){if(e[t])return e[t].exports;var r=e[t]={exports:{},id:t,loaded:!1};return n[t].call(r.exports,r,r.exports,o),r.loaded=!0,r.exports}var e={};return o.m=n,o.c=e,o.p="",o(0)}([function(n,o){"use strict";n.exports="import 'photon/dist/css/photon.css';\nimport preact from 'preact';\n\n/** @jsx h */\n\nlet h = preact && preact.h;\n\n/** Inject your own JSX renderer. */\nexport function setJsxRenderer(renderer) {\n	h = renderer;\n}\n\n/** @private */\nfunction component(render) {\n	return render;\n	// class F extends Component {}\n	// F.prototype.render = render;\n	// return F;\n}\n\n/** @private */\nfunction c(...args) {\n	return [].concat(...args.filter( x=>x )).join(' ');\n}\n\n/** @private */\nfunction componentNode(name, classes) {\n	return component( props => {\n		let c = <div {...props} class={c(props.class, classes)}>{props.children}</div>;\n		c.nodeName = name;\n		return c;\n	});\n}\n\n/** App \"footer\" bar, shown at the bottom of a window.\n *	@class\n */\nexport const Header = componentNode('header', ['toolbar toolbar-header']);\n\n/** App \"header\" bar, shown at the top of a window.\n *	@class\n */\nexport const Footer = componentNode('footer', ['toolbar toolbar-footer']);\n\n/** Toolbar title.\n *	@class\n */\nexport const Title = componentNode('h1', 'title');\n\n\n/** Group buttons together.\n *	@class\n *	@example\n *	<ButtonGroup>\n *		<Button>One</Button>\n *		<Button>Two</Button>\n *	</ButtonGroup>\n */\nexport const ButtonGroup = componentNode('div', 'btn-group');\n\n/** Buttons. They are clickable.\n *	@class\n *	@param {object} props\n *	@param {string} [icon]				If supplied, shows the given named icon to the left of the button text\n *	@param {boolean} [primary=false]	Make the button display as a default action\n *	@example\n *	<Button>Label Text</Button>\n *	@example\n *	<Button icon=\"home\">Home</Button>\n *	@example\n *	<Button large>Large Button</Button>\n *	@example\n *	<Button mini>Small Button</Button>\n *	@example\n *	<Button primary>Preferred Action</Button>\n *	@example\n *	<Button type=\"positive\">Green</Button>\n *	@example\n *	<Button type=\"negative\">Red</Button>\n *	@example\n *	<Button type=\"warning\">Yellow</Button>\n */\nexport const Button = component( props => (\n	<button {...props} class={c(\n		props.class,\n		`btn btn-${props.type || (props.primary ? 'primary' : 'default')}`,\n		props.dropdown && 'btn-dropdown',\n		props.large && 'btn-large',\n		props.mini && 'btn-mini',\n		props.form && 'btn-form'\n	)}>\n		{ props.icon ? (<Icon name={props.icon} text />) : null }\n		{ props.children }\n	</button>\n));\n\n\n/** A named icon/glyph from the nice built-in list of icons.\n *	@class\n *	@example\n *	<Icon name=\"close\" />\n */\nexport const Icon = component( props => (\n	<span {...props} class={c(props.class, `icon icon-${props.name}`, props.text && 'icon-text')}>\n		{ props.children }\n	</span>\n));\n\n\n/** Groups tabs together into a horizontal.\n *	@class\n *	@example\n *	<TabGroup>\n *		<Tab>One</Tab>\n *		<Tab>Two</Tab>\n *	</TabGroup>\n */\nexport const TabGroup = componentNode('div', 'tab-group');\n\n/** For building MDIs. Has a close button by default, add `close=\"false\"` to turn it off.\n *	@class\n *	@example\n *	<Tab>title</Tab>\n *	@example\n *	<Tab close=\"false\">title</Tab>\n */\nexport const Tab = component( props => (\n	<div class={c(props.class, 'tab-item')}>\n		{ String(props.close)==='false' ? null : <Icon name=\"cancel\" class=\"icon-close-tab\" /> }\n		{ props.children }\n	</div>\n));\n\nTabGroup.Item = Tab;\n\n\n/** Group of sidebar navigation items\n *	@class\n *	@example\n *	<NavGroup>\n *		<NavGroup.Title>Faves</NavGroup.Title>\n *		<NavGroup.Item>Foo</NavGroup.Item>\n *	</NavGroup>\n */\nexport const NavGroup = componentNode('nav', 'nav-group');\n\n/** Title for a group of navigation items.\n *	@class\n *	@example\n *	<NavGroup.Title>Faves</NavGroup.Title>\n */\nNavGroup.Title = componentNode('h5', 'nav-group-title');\n\n/** A single navigation item with optional icon.\n *	@class\n *	@example\n *	<NavGroup.Item>Home</NavGroup.Item>\n *	@example\n *	<NavGroup.Item icon=\"folder\">Documents</NavGroup.Item>\n */\nNavGroup.Item = component( props => (\n	<span {...props} class={c(props.class, 'nav-group-item')}>\n		{ props.icon ? (<Icon name={props.icon} />) : null }\n		{ props.children }\n	</span>\n));\n\n\n/** Group of list items\n *	@class\n *	@example\n *	<ListGroup>\n *		<ListGroup.Header>\n *			<input class=\"form-control\" type=\"text\" placeholder=\"Search...\">\n *		</ListGroup.Header>\n *		<ListGroup.Item>Foo</ListGroup.Item>\n *	</ListGroup>\n */\nexport const ListGroup = componentNode('ul', 'list-group');\n\n/** Top header item in a list group.\n *	@class\n *	@example\n *	<ListGroup.Header>\n *		<input class=\"form-control\" type=\"text\" placeholder=\"Search...\">\n *	</ListGroup.Header>\n */\nListGroup.Header = componentNode('li', 'list-group-header');\n\n/** A single navigation item with optional icon.\n *	@class\n *	@example\n *	<ListGroup.Item>Home</ListGroup.Item>\n */\nListGroup.Item = componentNode('li', 'list-group-item');\n\n\n/** HTML `<form>` */\nconst Form = componentNode('form');\n\n/** Basically `<fieldset>` */\nForm.Group = componentNode('div', 'form-group');\n\n/** Basically `<input type=\"checkbox\">` */\nForm.CheckBox = component( props => (\n	<div {...props} class={c(props.class, 'checkbox')}>\n		<label>\n			<input type=\"checkbox\" name={props.name} checked={props.checked} value={props.value} />\n			{ [].concat(props.label || [], props.children || []) }\n		</label>\n	</div>\n));\n\n/** Basically `<input type=\"radio\">` */\nForm.Radio = component( props => (\n	<div {...props} class={c(props.class, 'radio')}>\n		<label>\n			<input type=\"radio\" name={props.name} checked={props.checked} value={props.value} />\n			{ [].concat(props.label || [], props.children || []) }\n		</label>\n	</div>\n));\n\n/** Group buttons at the bottom of a form. */\nForm.Actions = componentNode('div', 'form-actions');\n\n\n/** Just an enhanced `<table>` */\nexport const Table = component( props => (\n	<table {...props} class={c(props.class, props.striped && 'table-striped')}>\n		{ props.children }\n	</table>\n));\n\n\n// export class Header extends Component {\n// 	render({ toolbar, title, children }) {\n// 		return (\n// 			<header class=\"toolbar toolbar-header\">\n// 				{ title ? (<h1 class=\"title\">{ title }</h1>) : null }\n// 				{ children }\n// 			</header>\n// 		);\n// 	}\n// }\n//\n// export class Button extends Component {\n// 	render({ icon, children }) {\n// 		return (\n// 			<button class=\"btn btn-default\">\n// 				{ icon ? (<Icon icon=\"home\" text />) : null }\n// 				{ children }\n// 			</button>\n// 		);\n// 	}\n// }\n"}]);
//# sourceMappingURL=index.js.map