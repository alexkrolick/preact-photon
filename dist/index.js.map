{"version":3,"sources":["webpack:///index.js","webpack:///webpack/bootstrap cc1d20360d78f8ea580f","webpack:///./src/index.js"],"names":["modules","__webpack_require__","moduleId","installedModules","exports","module","id","loaded","call","m","c","p"],"mappings":"CAAS,SAAUA,GCInB,QAAAC,GAAAC,GAGA,GAAAC,EAAAD,GACA,MAAAC,GAAAD,GAAAE,OAGA,IAAAC,GAAAF,EAAAD,IACAE,WACAE,GAAAJ,EACAK,QAAA,EAUA,OANAP,GAAAE,GAAAM,KAAAH,EAAAD,QAAAC,IAAAD,QAAAH,GAGAI,EAAAE,QAAA,EAGAF,EAAAD,QAvBA,GAAAD,KAqCA,OATAF,GAAAQ,EAAAT,EAGAC,EAAAS,EAAAP,EAGAF,EAAAU,EAAA,GAGAV,EAAA,KDMM,SAASI,EAAQD,GAEtB,YE9CDC,GAAOD,QAAU","file":"index.js","sourcesContent":["/******/ (function(modules) { // webpackBootstrap\n/******/ \t// The module cache\n/******/ \tvar installedModules = {};\n/******/\n/******/ \t// The require function\n/******/ \tfunction __webpack_require__(moduleId) {\n/******/\n/******/ \t\t// Check if module is in cache\n/******/ \t\tif(installedModules[moduleId])\n/******/ \t\t\treturn installedModules[moduleId].exports;\n/******/\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = installedModules[moduleId] = {\n/******/ \t\t\texports: {},\n/******/ \t\t\tid: moduleId,\n/******/ \t\t\tloaded: false\n/******/ \t\t};\n/******/\n/******/ \t\t// Execute the module function\n/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n/******/\n/******/ \t\t// Flag the module as loaded\n/******/ \t\tmodule.loaded = true;\n/******/\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n/******/\n/******/\n/******/ \t// expose the modules object (__webpack_modules__)\n/******/ \t__webpack_require__.m = modules;\n/******/\n/******/ \t// expose the module cache\n/******/ \t__webpack_require__.c = installedModules;\n/******/\n/******/ \t// __webpack_public_path__\n/******/ \t__webpack_require__.p = \"\";\n/******/\n/******/ \t// Load entry module and return exports\n/******/ \treturn __webpack_require__(0);\n/******/ })\n/************************************************************************/\n/******/ ([\n/* 0 */\n/***/ function(module, exports) {\n\n\t\"use strict\";\n\t\n\tmodule.exports = \"import 'photon/dist/css/photon.css';\\nimport preact from 'preact';\\n\\n/** @jsx h */\\n\\nlet h = preact && preact.h;\\n\\n/** Inject your own JSX renderer. */\\nexport function setJsxRenderer(renderer) {\\n\\th = renderer;\\n}\\n\\n/** @private */\\nfunction component(render) {\\n\\treturn render;\\n\\t// class F extends Component {}\\n\\t// F.prototype.render = render;\\n\\t// return F;\\n}\\n\\n/** @private */\\nfunction c(...args) {\\n\\treturn [].concat(...args.filter( x=>x )).join(' ');\\n}\\n\\n/** @private */\\nfunction componentNode(name, classes) {\\n\\treturn component( props => {\\n\\t\\tlet c = <div {...props} class={c(props.class, classes)}>{props.children}</div>;\\n\\t\\tc.nodeName = name;\\n\\t\\treturn c;\\n\\t});\\n}\\n\\n/** App \\\"footer\\\" bar, shown at the bottom of a window.\\n *\\t@class\\n */\\nexport const Header = componentNode('header', ['toolbar toolbar-header']);\\n\\n/** App \\\"header\\\" bar, shown at the top of a window.\\n *\\t@class\\n */\\nexport const Footer = componentNode('footer', ['toolbar toolbar-footer']);\\n\\n/** Toolbar title.\\n *\\t@class\\n */\\nexport const Title = componentNode('h1', 'title');\\n\\n\\n/** Group buttons together.\\n *\\t@class\\n *\\t@example\\n *\\t<ButtonGroup>\\n *\\t\\t<Button>One</Button>\\n *\\t\\t<Button>Two</Button>\\n *\\t</ButtonGroup>\\n */\\nexport const ButtonGroup = componentNode('div', 'btn-group');\\n\\n/** Buttons. They are clickable.\\n *\\t@class\\n *\\t@param {object} props\\n *\\t@param {string} [icon]\\t\\t\\t\\tIf supplied, shows the given named icon to the left of the button text\\n *\\t@param {boolean} [primary=false]\\tMake the button display as a default action\\n *\\t@example\\n *\\t<Button>Label Text</Button>\\n *\\t@example\\n *\\t<Button icon=\\\"home\\\">Home</Button>\\n *\\t@example\\n *\\t<Button large>Large Button</Button>\\n *\\t@example\\n *\\t<Button mini>Small Button</Button>\\n *\\t@example\\n *\\t<Button primary>Preferred Action</Button>\\n *\\t@example\\n *\\t<Button type=\\\"positive\\\">Green</Button>\\n *\\t@example\\n *\\t<Button type=\\\"negative\\\">Red</Button>\\n *\\t@example\\n *\\t<Button type=\\\"warning\\\">Yellow</Button>\\n */\\nexport const Button = component( props => (\\n\\t<button {...props} class={c(\\n\\t\\tprops.class,\\n\\t\\t`btn btn-${props.type || (props.primary ? 'primary' : 'default')}`,\\n\\t\\tprops.dropdown && 'btn-dropdown',\\n\\t\\tprops.large && 'btn-large',\\n\\t\\tprops.mini && 'btn-mini',\\n\\t\\tprops.form && 'btn-form'\\n\\t)}>\\n\\t\\t{ props.icon ? (<Icon name={props.icon} text />) : null }\\n\\t\\t{ props.children }\\n\\t</button>\\n));\\n\\n\\n/** A named icon/glyph from the nice built-in list of icons.\\n *\\t@class\\n *\\t@example\\n *\\t<Icon name=\\\"close\\\" />\\n */\\nexport const Icon = component( props => (\\n\\t<span {...props} class={c(props.class, `icon icon-${props.name}`, props.text && 'icon-text')}>\\n\\t\\t{ props.children }\\n\\t</span>\\n));\\n\\n\\n/** Groups tabs together into a horizontal.\\n *\\t@class\\n *\\t@example\\n *\\t<TabGroup>\\n *\\t\\t<Tab>One</Tab>\\n *\\t\\t<Tab>Two</Tab>\\n *\\t</TabGroup>\\n */\\nexport const TabGroup = componentNode('div', 'tab-group');\\n\\n/** For building MDIs. Has a close button by default, add `close=\\\"false\\\"` to turn it off.\\n *\\t@class\\n *\\t@example\\n *\\t<Tab>title</Tab>\\n *\\t@example\\n *\\t<Tab close=\\\"false\\\">title</Tab>\\n */\\nexport const Tab = component( props => (\\n\\t<div class={c(props.class, 'tab-item')}>\\n\\t\\t{ String(props.close)==='false' ? null : <Icon name=\\\"cancel\\\" class=\\\"icon-close-tab\\\" /> }\\n\\t\\t{ props.children }\\n\\t</div>\\n));\\n\\nTabGroup.Item = Tab;\\n\\n\\n/** Group of sidebar navigation items\\n *\\t@class\\n *\\t@example\\n *\\t<NavGroup>\\n *\\t\\t<NavGroup.Title>Faves</NavGroup.Title>\\n *\\t\\t<NavGroup.Item>Foo</NavGroup.Item>\\n *\\t</NavGroup>\\n */\\nexport const NavGroup = componentNode('nav', 'nav-group');\\n\\n/** Title for a group of navigation items.\\n *\\t@class\\n *\\t@example\\n *\\t<NavGroup.Title>Faves</NavGroup.Title>\\n */\\nNavGroup.Title = componentNode('h5', 'nav-group-title');\\n\\n/** A single navigation item with optional icon.\\n *\\t@class\\n *\\t@example\\n *\\t<NavGroup.Item>Home</NavGroup.Item>\\n *\\t@example\\n *\\t<NavGroup.Item icon=\\\"folder\\\">Documents</NavGroup.Item>\\n */\\nNavGroup.Item = component( props => (\\n\\t<span {...props} class={c(props.class, 'nav-group-item')}>\\n\\t\\t{ props.icon ? (<Icon name={props.icon} />) : null }\\n\\t\\t{ props.children }\\n\\t</span>\\n));\\n\\n\\n/** Group of list items\\n *\\t@class\\n *\\t@example\\n *\\t<ListGroup>\\n *\\t\\t<ListGroup.Header>\\n *\\t\\t\\t<input class=\\\"form-control\\\" type=\\\"text\\\" placeholder=\\\"Search...\\\">\\n *\\t\\t</ListGroup.Header>\\n *\\t\\t<ListGroup.Item>Foo</ListGroup.Item>\\n *\\t</ListGroup>\\n */\\nexport const ListGroup = componentNode('ul', 'list-group');\\n\\n/** Top header item in a list group.\\n *\\t@class\\n *\\t@example\\n *\\t<ListGroup.Header>\\n *\\t\\t<input class=\\\"form-control\\\" type=\\\"text\\\" placeholder=\\\"Search...\\\">\\n *\\t</ListGroup.Header>\\n */\\nListGroup.Header = componentNode('li', 'list-group-header');\\n\\n/** A single navigation item with optional icon.\\n *\\t@class\\n *\\t@example\\n *\\t<ListGroup.Item>Home</ListGroup.Item>\\n */\\nListGroup.Item = componentNode('li', 'list-group-item');\\n\\n\\n/** HTML `<form>` */\\nconst Form = componentNode('form');\\n\\n/** Basically `<fieldset>` */\\nForm.Group = componentNode('div', 'form-group');\\n\\n/** Basically `<input type=\\\"checkbox\\\">` */\\nForm.CheckBox = component( props => (\\n\\t<div {...props} class={c(props.class, 'checkbox')}>\\n\\t\\t<label>\\n\\t\\t\\t<input type=\\\"checkbox\\\" name={props.name} checked={props.checked} value={props.value} />\\n\\t\\t\\t{ [].concat(props.label || [], props.children || []) }\\n\\t\\t</label>\\n\\t</div>\\n));\\n\\n/** Basically `<input type=\\\"radio\\\">` */\\nForm.Radio = component( props => (\\n\\t<div {...props} class={c(props.class, 'radio')}>\\n\\t\\t<label>\\n\\t\\t\\t<input type=\\\"radio\\\" name={props.name} checked={props.checked} value={props.value} />\\n\\t\\t\\t{ [].concat(props.label || [], props.children || []) }\\n\\t\\t</label>\\n\\t</div>\\n));\\n\\n/** Group buttons at the bottom of a form. */\\nForm.Actions = componentNode('div', 'form-actions');\\n\\n\\n/** Just an enhanced `<table>` */\\nexport const Table = component( props => (\\n\\t<table {...props} class={c(props.class, props.striped && 'table-striped')}>\\n\\t\\t{ props.children }\\n\\t</table>\\n));\\n\\n\\n// export class Header extends Component {\\n// \\trender({ toolbar, title, children }) {\\n// \\t\\treturn (\\n// \\t\\t\\t<header class=\\\"toolbar toolbar-header\\\">\\n// \\t\\t\\t\\t{ title ? (<h1 class=\\\"title\\\">{ title }</h1>) : null }\\n// \\t\\t\\t\\t{ children }\\n// \\t\\t\\t</header>\\n// \\t\\t);\\n// \\t}\\n// }\\n//\\n// export class Button extends Component {\\n// \\trender({ icon, children }) {\\n// \\t\\treturn (\\n// \\t\\t\\t<button class=\\\"btn btn-default\\\">\\n// \\t\\t\\t\\t{ icon ? (<Icon icon=\\\"home\\\" text />) : null }\\n// \\t\\t\\t\\t{ children }\\n// \\t\\t\\t</button>\\n// \\t\\t);\\n// \\t}\\n// }\\n\";\n\n/***/ }\n/******/ ]);\n\n\n/** WEBPACK FOOTER **\n ** index.js\n **/"," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId])\n \t\t\treturn installedModules[moduleId].exports;\n\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\texports: {},\n \t\t\tid: moduleId,\n \t\t\tloaded: false\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.loaded = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(0);\n\n\n\n/** WEBPACK FOOTER **\n ** webpack/bootstrap cc1d20360d78f8ea580f\n **/","module.exports = \"import 'photon/dist/css/photon.css';\\nimport preact from 'preact';\\n\\n/** @jsx h */\\n\\nlet h = preact && preact.h;\\n\\n/** Inject your own JSX renderer. */\\nexport function setJsxRenderer(renderer) {\\n\\th = renderer;\\n}\\n\\n/** @private */\\nfunction component(render) {\\n\\treturn render;\\n\\t// class F extends Component {}\\n\\t// F.prototype.render = render;\\n\\t// return F;\\n}\\n\\n/** @private */\\nfunction c(...args) {\\n\\treturn [].concat(...args.filter( x=>x )).join(' ');\\n}\\n\\n/** @private */\\nfunction componentNode(name, classes) {\\n\\treturn component( props => {\\n\\t\\tlet c = <div {...props} class={c(props.class, classes)}>{props.children}</div>;\\n\\t\\tc.nodeName = name;\\n\\t\\treturn c;\\n\\t});\\n}\\n\\n/** App \\\"footer\\\" bar, shown at the bottom of a window.\\n *\\t@class\\n */\\nexport const Header = componentNode('header', ['toolbar toolbar-header']);\\n\\n/** App \\\"header\\\" bar, shown at the top of a window.\\n *\\t@class\\n */\\nexport const Footer = componentNode('footer', ['toolbar toolbar-footer']);\\n\\n/** Toolbar title.\\n *\\t@class\\n */\\nexport const Title = componentNode('h1', 'title');\\n\\n\\n/** Group buttons together.\\n *\\t@class\\n *\\t@example\\n *\\t<ButtonGroup>\\n *\\t\\t<Button>One</Button>\\n *\\t\\t<Button>Two</Button>\\n *\\t</ButtonGroup>\\n */\\nexport const ButtonGroup = componentNode('div', 'btn-group');\\n\\n/** Buttons. They are clickable.\\n *\\t@class\\n *\\t@param {object} props\\n *\\t@param {string} [icon]\\t\\t\\t\\tIf supplied, shows the given named icon to the left of the button text\\n *\\t@param {boolean} [primary=false]\\tMake the button display as a default action\\n *\\t@example\\n *\\t<Button>Label Text</Button>\\n *\\t@example\\n *\\t<Button icon=\\\"home\\\">Home</Button>\\n *\\t@example\\n *\\t<Button large>Large Button</Button>\\n *\\t@example\\n *\\t<Button mini>Small Button</Button>\\n *\\t@example\\n *\\t<Button primary>Preferred Action</Button>\\n *\\t@example\\n *\\t<Button type=\\\"positive\\\">Green</Button>\\n *\\t@example\\n *\\t<Button type=\\\"negative\\\">Red</Button>\\n *\\t@example\\n *\\t<Button type=\\\"warning\\\">Yellow</Button>\\n */\\nexport const Button = component( props => (\\n\\t<button {...props} class={c(\\n\\t\\tprops.class,\\n\\t\\t`btn btn-${props.type || (props.primary ? 'primary' : 'default')}`,\\n\\t\\tprops.dropdown && 'btn-dropdown',\\n\\t\\tprops.large && 'btn-large',\\n\\t\\tprops.mini && 'btn-mini',\\n\\t\\tprops.form && 'btn-form'\\n\\t)}>\\n\\t\\t{ props.icon ? (<Icon name={props.icon} text />) : null }\\n\\t\\t{ props.children }\\n\\t</button>\\n));\\n\\n\\n/** A named icon/glyph from the nice built-in list of icons.\\n *\\t@class\\n *\\t@example\\n *\\t<Icon name=\\\"close\\\" />\\n */\\nexport const Icon = component( props => (\\n\\t<span {...props} class={c(props.class, `icon icon-${props.name}`, props.text && 'icon-text')}>\\n\\t\\t{ props.children }\\n\\t</span>\\n));\\n\\n\\n/** Groups tabs together into a horizontal.\\n *\\t@class\\n *\\t@example\\n *\\t<TabGroup>\\n *\\t\\t<Tab>One</Tab>\\n *\\t\\t<Tab>Two</Tab>\\n *\\t</TabGroup>\\n */\\nexport const TabGroup = componentNode('div', 'tab-group');\\n\\n/** For building MDIs. Has a close button by default, add `close=\\\"false\\\"` to turn it off.\\n *\\t@class\\n *\\t@example\\n *\\t<Tab>title</Tab>\\n *\\t@example\\n *\\t<Tab close=\\\"false\\\">title</Tab>\\n */\\nexport const Tab = component( props => (\\n\\t<div class={c(props.class, 'tab-item')}>\\n\\t\\t{ String(props.close)==='false' ? null : <Icon name=\\\"cancel\\\" class=\\\"icon-close-tab\\\" /> }\\n\\t\\t{ props.children }\\n\\t</div>\\n));\\n\\nTabGroup.Item = Tab;\\n\\n\\n/** Group of sidebar navigation items\\n *\\t@class\\n *\\t@example\\n *\\t<NavGroup>\\n *\\t\\t<NavGroup.Title>Faves</NavGroup.Title>\\n *\\t\\t<NavGroup.Item>Foo</NavGroup.Item>\\n *\\t</NavGroup>\\n */\\nexport const NavGroup = componentNode('nav', 'nav-group');\\n\\n/** Title for a group of navigation items.\\n *\\t@class\\n *\\t@example\\n *\\t<NavGroup.Title>Faves</NavGroup.Title>\\n */\\nNavGroup.Title = componentNode('h5', 'nav-group-title');\\n\\n/** A single navigation item with optional icon.\\n *\\t@class\\n *\\t@example\\n *\\t<NavGroup.Item>Home</NavGroup.Item>\\n *\\t@example\\n *\\t<NavGroup.Item icon=\\\"folder\\\">Documents</NavGroup.Item>\\n */\\nNavGroup.Item = component( props => (\\n\\t<span {...props} class={c(props.class, 'nav-group-item')}>\\n\\t\\t{ props.icon ? (<Icon name={props.icon} />) : null }\\n\\t\\t{ props.children }\\n\\t</span>\\n));\\n\\n\\n/** Group of list items\\n *\\t@class\\n *\\t@example\\n *\\t<ListGroup>\\n *\\t\\t<ListGroup.Header>\\n *\\t\\t\\t<input class=\\\"form-control\\\" type=\\\"text\\\" placeholder=\\\"Search...\\\">\\n *\\t\\t</ListGroup.Header>\\n *\\t\\t<ListGroup.Item>Foo</ListGroup.Item>\\n *\\t</ListGroup>\\n */\\nexport const ListGroup = componentNode('ul', 'list-group');\\n\\n/** Top header item in a list group.\\n *\\t@class\\n *\\t@example\\n *\\t<ListGroup.Header>\\n *\\t\\t<input class=\\\"form-control\\\" type=\\\"text\\\" placeholder=\\\"Search...\\\">\\n *\\t</ListGroup.Header>\\n */\\nListGroup.Header = componentNode('li', 'list-group-header');\\n\\n/** A single navigation item with optional icon.\\n *\\t@class\\n *\\t@example\\n *\\t<ListGroup.Item>Home</ListGroup.Item>\\n */\\nListGroup.Item = componentNode('li', 'list-group-item');\\n\\n\\n/** HTML `<form>` */\\nconst Form = componentNode('form');\\n\\n/** Basically `<fieldset>` */\\nForm.Group = componentNode('div', 'form-group');\\n\\n/** Basically `<input type=\\\"checkbox\\\">` */\\nForm.CheckBox = component( props => (\\n\\t<div {...props} class={c(props.class, 'checkbox')}>\\n\\t\\t<label>\\n\\t\\t\\t<input type=\\\"checkbox\\\" name={props.name} checked={props.checked} value={props.value} />\\n\\t\\t\\t{ [].concat(props.label || [], props.children || []) }\\n\\t\\t</label>\\n\\t</div>\\n));\\n\\n/** Basically `<input type=\\\"radio\\\">` */\\nForm.Radio = component( props => (\\n\\t<div {...props} class={c(props.class, 'radio')}>\\n\\t\\t<label>\\n\\t\\t\\t<input type=\\\"radio\\\" name={props.name} checked={props.checked} value={props.value} />\\n\\t\\t\\t{ [].concat(props.label || [], props.children || []) }\\n\\t\\t</label>\\n\\t</div>\\n));\\n\\n/** Group buttons at the bottom of a form. */\\nForm.Actions = componentNode('div', 'form-actions');\\n\\n\\n/** Just an enhanced `<table>` */\\nexport const Table = component( props => (\\n\\t<table {...props} class={c(props.class, props.striped && 'table-striped')}>\\n\\t\\t{ props.children }\\n\\t</table>\\n));\\n\\n\\n// export class Header extends Component {\\n// \\trender({ toolbar, title, children }) {\\n// \\t\\treturn (\\n// \\t\\t\\t<header class=\\\"toolbar toolbar-header\\\">\\n// \\t\\t\\t\\t{ title ? (<h1 class=\\\"title\\\">{ title }</h1>) : null }\\n// \\t\\t\\t\\t{ children }\\n// \\t\\t\\t</header>\\n// \\t\\t);\\n// \\t}\\n// }\\n//\\n// export class Button extends Component {\\n// \\trender({ icon, children }) {\\n// \\t\\treturn (\\n// \\t\\t\\t<button class=\\\"btn btn-default\\\">\\n// \\t\\t\\t\\t{ icon ? (<Icon icon=\\\"home\\\" text />) : null }\\n// \\t\\t\\t\\t{ children }\\n// \\t\\t\\t</button>\\n// \\t\\t);\\n// \\t}\\n// }\\n\"\n\n\n/** WEBPACK FOOTER **\n ** ./~/raw-loader!./src/index.js\n **/"],"sourceRoot":""}